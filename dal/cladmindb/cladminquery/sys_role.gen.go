// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package cladminquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cladmin/dal/cladmindb/cladminmodel"
)

func newSysRole(db *gorm.DB, opts ...gen.DOOption) sysRole {
	_sysRole := sysRole{}

	_sysRole.sysRoleDo.UseDB(db, opts...)
	_sysRole.sysRoleDo.UseModel(&cladminmodel.SysRole{})

	tableName := _sysRole.sysRoleDo.TableName()
	_sysRole.ALL = field.NewAsterisk(tableName)
	_sysRole.ID = field.NewUint64(tableName, "id")
	_sysRole.RoleName = field.NewString(tableName, "role_name")
	_sysRole.Remark = field.NewString(tableName, "remark")
	_sysRole.MenuIDList = field.NewString(tableName, "menu_id_list")
	_sysRole.CreateUserID = field.NewUint64(tableName, "create_user_id")
	_sysRole.CreatedAt = field.NewTime(tableName, "created_at")
	_sysRole.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysRole.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysRole.Menus = sysRoleManyToManyMenus{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Menus", "cladminmodel.SysMenu"),
		Roles: struct {
			field.RelationField
			Menus struct {
				field.RelationField
			}
			Users struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Menus.Roles", "cladminmodel.SysRole"),
			Menus: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Menus.Roles.Menus", "cladminmodel.SysMenu"),
			},
			Users: struct {
				field.RelationField
				Roles struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Menus.Roles.Users", "cladminmodel.SysUser"),
				Roles: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Menus.Roles.Users.Roles", "cladminmodel.SysRole"),
				},
			},
		},
	}

	_sysRole.Users = sysRoleManyToManyUsers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Users", "cladminmodel.SysUser"),
	}

	_sysRole.fillFieldMap()

	return _sysRole
}

type sysRole struct {
	sysRoleDo sysRoleDo

	ALL          field.Asterisk
	ID           field.Uint64
	RoleName     field.String
	Remark       field.String
	MenuIDList   field.String
	CreateUserID field.Uint64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Menus        sysRoleManyToManyMenus

	Users sysRoleManyToManyUsers

	fieldMap map[string]field.Expr
}

func (s sysRole) Table(newTableName string) *sysRole {
	s.sysRoleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysRole) As(alias string) *sysRole {
	s.sysRoleDo.DO = *(s.sysRoleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysRole) updateTableName(table string) *sysRole {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.RoleName = field.NewString(table, "role_name")
	s.Remark = field.NewString(table, "remark")
	s.MenuIDList = field.NewString(table, "menu_id_list")
	s.CreateUserID = field.NewUint64(table, "create_user_id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysRole) WithContext(ctx context.Context) ISysRoleDo { return s.sysRoleDo.WithContext(ctx) }

func (s sysRole) TableName() string { return s.sysRoleDo.TableName() }

func (s sysRole) Alias() string { return s.sysRoleDo.Alias() }

func (s *sysRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysRole) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["role_name"] = s.RoleName
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["menu_id_list"] = s.MenuIDList
	s.fieldMap["create_user_id"] = s.CreateUserID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt

}

func (s sysRole) clone(db *gorm.DB) sysRole {
	s.sysRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysRole) replaceDB(db *gorm.DB) sysRole {
	s.sysRoleDo.ReplaceDB(db)
	return s
}

type sysRoleManyToManyMenus struct {
	db *gorm.DB

	field.RelationField

	Roles struct {
		field.RelationField
		Menus struct {
			field.RelationField
		}
		Users struct {
			field.RelationField
			Roles struct {
				field.RelationField
			}
		}
	}
}

func (a sysRoleManyToManyMenus) Where(conds ...field.Expr) *sysRoleManyToManyMenus {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysRoleManyToManyMenus) WithContext(ctx context.Context) *sysRoleManyToManyMenus {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysRoleManyToManyMenus) Session(session *gorm.Session) *sysRoleManyToManyMenus {
	a.db = a.db.Session(session)
	return &a
}

func (a sysRoleManyToManyMenus) Model(m *cladminmodel.SysRole) *sysRoleManyToManyMenusTx {
	return &sysRoleManyToManyMenusTx{a.db.Model(m).Association(a.Name())}
}

type sysRoleManyToManyMenusTx struct{ tx *gorm.Association }

func (a sysRoleManyToManyMenusTx) Find() (result []*cladminmodel.SysMenu, err error) {
	return result, a.tx.Find(&result)
}

func (a sysRoleManyToManyMenusTx) Append(values ...*cladminmodel.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysRoleManyToManyMenusTx) Replace(values ...*cladminmodel.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysRoleManyToManyMenusTx) Delete(values ...*cladminmodel.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysRoleManyToManyMenusTx) Clear() error {
	return a.tx.Clear()
}

func (a sysRoleManyToManyMenusTx) Count() int64 {
	return a.tx.Count()
}

type sysRoleManyToManyUsers struct {
	db *gorm.DB

	field.RelationField
}

func (a sysRoleManyToManyUsers) Where(conds ...field.Expr) *sysRoleManyToManyUsers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysRoleManyToManyUsers) WithContext(ctx context.Context) *sysRoleManyToManyUsers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysRoleManyToManyUsers) Session(session *gorm.Session) *sysRoleManyToManyUsers {
	a.db = a.db.Session(session)
	return &a
}

func (a sysRoleManyToManyUsers) Model(m *cladminmodel.SysRole) *sysRoleManyToManyUsersTx {
	return &sysRoleManyToManyUsersTx{a.db.Model(m).Association(a.Name())}
}

type sysRoleManyToManyUsersTx struct{ tx *gorm.Association }

func (a sysRoleManyToManyUsersTx) Find() (result []*cladminmodel.SysUser, err error) {
	return result, a.tx.Find(&result)
}

func (a sysRoleManyToManyUsersTx) Append(values ...*cladminmodel.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysRoleManyToManyUsersTx) Replace(values ...*cladminmodel.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysRoleManyToManyUsersTx) Delete(values ...*cladminmodel.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysRoleManyToManyUsersTx) Clear() error {
	return a.tx.Clear()
}

func (a sysRoleManyToManyUsersTx) Count() int64 {
	return a.tx.Count()
}

type sysRoleDo struct{ gen.DO }

type ISysRoleDo interface {
	gen.SubQuery
	Debug() ISysRoleDo
	WithContext(ctx context.Context) ISysRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysRoleDo
	WriteDB() ISysRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysRoleDo
	Not(conds ...gen.Condition) ISysRoleDo
	Or(conds ...gen.Condition) ISysRoleDo
	Select(conds ...field.Expr) ISysRoleDo
	Where(conds ...gen.Condition) ISysRoleDo
	Order(conds ...field.Expr) ISysRoleDo
	Distinct(cols ...field.Expr) ISysRoleDo
	Omit(cols ...field.Expr) ISysRoleDo
	Join(table schema.Tabler, on ...field.Expr) ISysRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleDo
	Group(cols ...field.Expr) ISysRoleDo
	Having(conds ...gen.Condition) ISysRoleDo
	Limit(limit int) ISysRoleDo
	Offset(offset int) ISysRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleDo
	Unscoped() ISysRoleDo
	Create(values ...*cladminmodel.SysRole) error
	CreateInBatches(values []*cladminmodel.SysRole, batchSize int) error
	Save(values ...*cladminmodel.SysRole) error
	First() (*cladminmodel.SysRole, error)
	Take() (*cladminmodel.SysRole, error)
	Last() (*cladminmodel.SysRole, error)
	Find() ([]*cladminmodel.SysRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*cladminmodel.SysRole, err error)
	FindInBatches(result *[]*cladminmodel.SysRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*cladminmodel.SysRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysRoleDo
	Assign(attrs ...field.AssignExpr) ISysRoleDo
	Joins(fields ...field.RelationField) ISysRoleDo
	Preload(fields ...field.RelationField) ISysRoleDo
	FirstOrInit() (*cladminmodel.SysRole, error)
	FirstOrCreate() (*cladminmodel.SysRole, error)
	FindByPage(offset int, limit int) (result []*cladminmodel.SysRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysRoleDo) Debug() ISysRoleDo {
	return s.withDO(s.DO.Debug())
}

func (s sysRoleDo) WithContext(ctx context.Context) ISysRoleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysRoleDo) ReadDB() ISysRoleDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysRoleDo) WriteDB() ISysRoleDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysRoleDo) Session(config *gorm.Session) ISysRoleDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysRoleDo) Clauses(conds ...clause.Expression) ISysRoleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysRoleDo) Returning(value interface{}, columns ...string) ISysRoleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysRoleDo) Not(conds ...gen.Condition) ISysRoleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysRoleDo) Or(conds ...gen.Condition) ISysRoleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysRoleDo) Select(conds ...field.Expr) ISysRoleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysRoleDo) Where(conds ...gen.Condition) ISysRoleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysRoleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysRoleDo) Order(conds ...field.Expr) ISysRoleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysRoleDo) Distinct(cols ...field.Expr) ISysRoleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysRoleDo) Omit(cols ...field.Expr) ISysRoleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysRoleDo) Join(table schema.Tabler, on ...field.Expr) ISysRoleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysRoleDo) Group(cols ...field.Expr) ISysRoleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysRoleDo) Having(conds ...gen.Condition) ISysRoleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysRoleDo) Limit(limit int) ISysRoleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysRoleDo) Offset(offset int) ISysRoleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysRoleDo) Unscoped() ISysRoleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysRoleDo) Create(values ...*cladminmodel.SysRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysRoleDo) CreateInBatches(values []*cladminmodel.SysRole, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysRoleDo) Save(values ...*cladminmodel.SysRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysRoleDo) First() (*cladminmodel.SysRole, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysRole), nil
	}
}

func (s sysRoleDo) Take() (*cladminmodel.SysRole, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysRole), nil
	}
}

func (s sysRoleDo) Last() (*cladminmodel.SysRole, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysRole), nil
	}
}

func (s sysRoleDo) Find() ([]*cladminmodel.SysRole, error) {
	result, err := s.DO.Find()
	return result.([]*cladminmodel.SysRole), err
}

func (s sysRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*cladminmodel.SysRole, err error) {
	buf := make([]*cladminmodel.SysRole, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysRoleDo) FindInBatches(result *[]*cladminmodel.SysRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysRoleDo) Attrs(attrs ...field.AssignExpr) ISysRoleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysRoleDo) Assign(attrs ...field.AssignExpr) ISysRoleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysRoleDo) Joins(fields ...field.RelationField) ISysRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysRoleDo) Preload(fields ...field.RelationField) ISysRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysRoleDo) FirstOrInit() (*cladminmodel.SysRole, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysRole), nil
	}
}

func (s sysRoleDo) FirstOrCreate() (*cladminmodel.SysRole, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysRole), nil
	}
}

func (s sysRoleDo) FindByPage(offset int, limit int) (result []*cladminmodel.SysRole, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysRoleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysRoleDo) Delete(models ...*cladminmodel.SysRole) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysRoleDo) withDO(do gen.Dao) *sysRoleDo {
	s.DO = *do.(*gen.DO)
	return s
}
