// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package cladminquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cladmin/dal/cladmindb/cladminmodel"
)

func newSysBulletin(db *gorm.DB, opts ...gen.DOOption) sysBulletin {
	_sysBulletin := sysBulletin{}

	_sysBulletin.sysBulletinDo.UseDB(db, opts...)
	_sysBulletin.sysBulletinDo.UseModel(&cladminmodel.SysBulletin{})

	tableName := _sysBulletin.sysBulletinDo.TableName()
	_sysBulletin.ALL = field.NewAsterisk(tableName)
	_sysBulletin.ID = field.NewUint64(tableName, "id")
	_sysBulletin.Title = field.NewString(tableName, "title")
	_sysBulletin.Tag = field.NewString(tableName, "tag")
	_sysBulletin.Content = field.NewString(tableName, "content")
	_sysBulletin.CreatedAt = field.NewTime(tableName, "created_at")
	_sysBulletin.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysBulletin.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysBulletin.fillFieldMap()

	return _sysBulletin
}

type sysBulletin struct {
	sysBulletinDo sysBulletinDo

	ALL       field.Asterisk
	ID        field.Uint64
	Title     field.String
	Tag       field.String
	Content   field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (s sysBulletin) Table(newTableName string) *sysBulletin {
	s.sysBulletinDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysBulletin) As(alias string) *sysBulletin {
	s.sysBulletinDo.DO = *(s.sysBulletinDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysBulletin) updateTableName(table string) *sysBulletin {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.Title = field.NewString(table, "title")
	s.Tag = field.NewString(table, "tag")
	s.Content = field.NewString(table, "content")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysBulletin) WithContext(ctx context.Context) ISysBulletinDo {
	return s.sysBulletinDo.WithContext(ctx)
}

func (s sysBulletin) TableName() string { return s.sysBulletinDo.TableName() }

func (s sysBulletin) Alias() string { return s.sysBulletinDo.Alias() }

func (s *sysBulletin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysBulletin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["title"] = s.Title
	s.fieldMap["tag"] = s.Tag
	s.fieldMap["content"] = s.Content
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysBulletin) clone(db *gorm.DB) sysBulletin {
	s.sysBulletinDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysBulletin) replaceDB(db *gorm.DB) sysBulletin {
	s.sysBulletinDo.ReplaceDB(db)
	return s
}

type sysBulletinDo struct{ gen.DO }

type ISysBulletinDo interface {
	gen.SubQuery
	Debug() ISysBulletinDo
	WithContext(ctx context.Context) ISysBulletinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysBulletinDo
	WriteDB() ISysBulletinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysBulletinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysBulletinDo
	Not(conds ...gen.Condition) ISysBulletinDo
	Or(conds ...gen.Condition) ISysBulletinDo
	Select(conds ...field.Expr) ISysBulletinDo
	Where(conds ...gen.Condition) ISysBulletinDo
	Order(conds ...field.Expr) ISysBulletinDo
	Distinct(cols ...field.Expr) ISysBulletinDo
	Omit(cols ...field.Expr) ISysBulletinDo
	Join(table schema.Tabler, on ...field.Expr) ISysBulletinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysBulletinDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysBulletinDo
	Group(cols ...field.Expr) ISysBulletinDo
	Having(conds ...gen.Condition) ISysBulletinDo
	Limit(limit int) ISysBulletinDo
	Offset(offset int) ISysBulletinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysBulletinDo
	Unscoped() ISysBulletinDo
	Create(values ...*cladminmodel.SysBulletin) error
	CreateInBatches(values []*cladminmodel.SysBulletin, batchSize int) error
	Save(values ...*cladminmodel.SysBulletin) error
	First() (*cladminmodel.SysBulletin, error)
	Take() (*cladminmodel.SysBulletin, error)
	Last() (*cladminmodel.SysBulletin, error)
	Find() ([]*cladminmodel.SysBulletin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*cladminmodel.SysBulletin, err error)
	FindInBatches(result *[]*cladminmodel.SysBulletin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*cladminmodel.SysBulletin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysBulletinDo
	Assign(attrs ...field.AssignExpr) ISysBulletinDo
	Joins(fields ...field.RelationField) ISysBulletinDo
	Preload(fields ...field.RelationField) ISysBulletinDo
	FirstOrInit() (*cladminmodel.SysBulletin, error)
	FirstOrCreate() (*cladminmodel.SysBulletin, error)
	FindByPage(offset int, limit int) (result []*cladminmodel.SysBulletin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysBulletinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysBulletinDo) Debug() ISysBulletinDo {
	return s.withDO(s.DO.Debug())
}

func (s sysBulletinDo) WithContext(ctx context.Context) ISysBulletinDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysBulletinDo) ReadDB() ISysBulletinDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysBulletinDo) WriteDB() ISysBulletinDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysBulletinDo) Session(config *gorm.Session) ISysBulletinDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysBulletinDo) Clauses(conds ...clause.Expression) ISysBulletinDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysBulletinDo) Returning(value interface{}, columns ...string) ISysBulletinDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysBulletinDo) Not(conds ...gen.Condition) ISysBulletinDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysBulletinDo) Or(conds ...gen.Condition) ISysBulletinDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysBulletinDo) Select(conds ...field.Expr) ISysBulletinDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysBulletinDo) Where(conds ...gen.Condition) ISysBulletinDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysBulletinDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysBulletinDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysBulletinDo) Order(conds ...field.Expr) ISysBulletinDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysBulletinDo) Distinct(cols ...field.Expr) ISysBulletinDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysBulletinDo) Omit(cols ...field.Expr) ISysBulletinDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysBulletinDo) Join(table schema.Tabler, on ...field.Expr) ISysBulletinDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysBulletinDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysBulletinDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysBulletinDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysBulletinDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysBulletinDo) Group(cols ...field.Expr) ISysBulletinDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysBulletinDo) Having(conds ...gen.Condition) ISysBulletinDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysBulletinDo) Limit(limit int) ISysBulletinDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysBulletinDo) Offset(offset int) ISysBulletinDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysBulletinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysBulletinDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysBulletinDo) Unscoped() ISysBulletinDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysBulletinDo) Create(values ...*cladminmodel.SysBulletin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysBulletinDo) CreateInBatches(values []*cladminmodel.SysBulletin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysBulletinDo) Save(values ...*cladminmodel.SysBulletin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysBulletinDo) First() (*cladminmodel.SysBulletin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysBulletin), nil
	}
}

func (s sysBulletinDo) Take() (*cladminmodel.SysBulletin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysBulletin), nil
	}
}

func (s sysBulletinDo) Last() (*cladminmodel.SysBulletin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysBulletin), nil
	}
}

func (s sysBulletinDo) Find() ([]*cladminmodel.SysBulletin, error) {
	result, err := s.DO.Find()
	return result.([]*cladminmodel.SysBulletin), err
}

func (s sysBulletinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*cladminmodel.SysBulletin, err error) {
	buf := make([]*cladminmodel.SysBulletin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysBulletinDo) FindInBatches(result *[]*cladminmodel.SysBulletin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysBulletinDo) Attrs(attrs ...field.AssignExpr) ISysBulletinDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysBulletinDo) Assign(attrs ...field.AssignExpr) ISysBulletinDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysBulletinDo) Joins(fields ...field.RelationField) ISysBulletinDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysBulletinDo) Preload(fields ...field.RelationField) ISysBulletinDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysBulletinDo) FirstOrInit() (*cladminmodel.SysBulletin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysBulletin), nil
	}
}

func (s sysBulletinDo) FirstOrCreate() (*cladminmodel.SysBulletin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysBulletin), nil
	}
}

func (s sysBulletinDo) FindByPage(offset int, limit int) (result []*cladminmodel.SysBulletin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysBulletinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysBulletinDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysBulletinDo) Delete(models ...*cladminmodel.SysBulletin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysBulletinDo) withDO(do gen.Dao) *sysBulletinDo {
	s.DO = *do.(*gen.DO)
	return s
}
