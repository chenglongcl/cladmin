// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package cladminquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cladmin/dal/cladmindb/cladminmodel"
)

func newSysCategory(db *gorm.DB, opts ...gen.DOOption) sysCategory {
	_sysCategory := sysCategory{}

	_sysCategory.sysCategoryDo.UseDB(db, opts...)
	_sysCategory.sysCategoryDo.UseModel(&cladminmodel.SysCategory{})

	tableName := _sysCategory.sysCategoryDo.TableName()
	_sysCategory.ALL = field.NewAsterisk(tableName)
	_sysCategory.ID = field.NewUint64(tableName, "id")
	_sysCategory.ParentID = field.NewUint64(tableName, "parent_id")
	_sysCategory.Name = field.NewString(tableName, "name")
	_sysCategory.Icon = field.NewString(tableName, "icon")
	_sysCategory.OrderNum = field.NewInt64(tableName, "order_num")
	_sysCategory.CreatedAt = field.NewTime(tableName, "created_at")
	_sysCategory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysCategory.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysCategory.fillFieldMap()

	return _sysCategory
}

type sysCategory struct {
	sysCategoryDo sysCategoryDo

	ALL       field.Asterisk
	ID        field.Uint64
	ParentID  field.Uint64
	Name      field.String
	Icon      field.String
	OrderNum  field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (s sysCategory) Table(newTableName string) *sysCategory {
	s.sysCategoryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysCategory) As(alias string) *sysCategory {
	s.sysCategoryDo.DO = *(s.sysCategoryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysCategory) updateTableName(table string) *sysCategory {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.ParentID = field.NewUint64(table, "parent_id")
	s.Name = field.NewString(table, "name")
	s.Icon = field.NewString(table, "icon")
	s.OrderNum = field.NewInt64(table, "order_num")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysCategory) WithContext(ctx context.Context) ISysCategoryDo {
	return s.sysCategoryDo.WithContext(ctx)
}

func (s sysCategory) TableName() string { return s.sysCategoryDo.TableName() }

func (s sysCategory) Alias() string { return s.sysCategoryDo.Alias() }

func (s *sysCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysCategory) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["name"] = s.Name
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["order_num"] = s.OrderNum
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysCategory) clone(db *gorm.DB) sysCategory {
	s.sysCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysCategory) replaceDB(db *gorm.DB) sysCategory {
	s.sysCategoryDo.ReplaceDB(db)
	return s
}

type sysCategoryDo struct{ gen.DO }

type ISysCategoryDo interface {
	gen.SubQuery
	Debug() ISysCategoryDo
	WithContext(ctx context.Context) ISysCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysCategoryDo
	WriteDB() ISysCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysCategoryDo
	Not(conds ...gen.Condition) ISysCategoryDo
	Or(conds ...gen.Condition) ISysCategoryDo
	Select(conds ...field.Expr) ISysCategoryDo
	Where(conds ...gen.Condition) ISysCategoryDo
	Order(conds ...field.Expr) ISysCategoryDo
	Distinct(cols ...field.Expr) ISysCategoryDo
	Omit(cols ...field.Expr) ISysCategoryDo
	Join(table schema.Tabler, on ...field.Expr) ISysCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysCategoryDo
	Group(cols ...field.Expr) ISysCategoryDo
	Having(conds ...gen.Condition) ISysCategoryDo
	Limit(limit int) ISysCategoryDo
	Offset(offset int) ISysCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCategoryDo
	Unscoped() ISysCategoryDo
	Create(values ...*cladminmodel.SysCategory) error
	CreateInBatches(values []*cladminmodel.SysCategory, batchSize int) error
	Save(values ...*cladminmodel.SysCategory) error
	First() (*cladminmodel.SysCategory, error)
	Take() (*cladminmodel.SysCategory, error)
	Last() (*cladminmodel.SysCategory, error)
	Find() ([]*cladminmodel.SysCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*cladminmodel.SysCategory, err error)
	FindInBatches(result *[]*cladminmodel.SysCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*cladminmodel.SysCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysCategoryDo
	Assign(attrs ...field.AssignExpr) ISysCategoryDo
	Joins(fields ...field.RelationField) ISysCategoryDo
	Preload(fields ...field.RelationField) ISysCategoryDo
	FirstOrInit() (*cladminmodel.SysCategory, error)
	FirstOrCreate() (*cladminmodel.SysCategory, error)
	FindByPage(offset int, limit int) (result []*cladminmodel.SysCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysCategoryDo) Debug() ISysCategoryDo {
	return s.withDO(s.DO.Debug())
}

func (s sysCategoryDo) WithContext(ctx context.Context) ISysCategoryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysCategoryDo) ReadDB() ISysCategoryDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysCategoryDo) WriteDB() ISysCategoryDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysCategoryDo) Session(config *gorm.Session) ISysCategoryDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysCategoryDo) Clauses(conds ...clause.Expression) ISysCategoryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysCategoryDo) Returning(value interface{}, columns ...string) ISysCategoryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysCategoryDo) Not(conds ...gen.Condition) ISysCategoryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysCategoryDo) Or(conds ...gen.Condition) ISysCategoryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysCategoryDo) Select(conds ...field.Expr) ISysCategoryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysCategoryDo) Where(conds ...gen.Condition) ISysCategoryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysCategoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysCategoryDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysCategoryDo) Order(conds ...field.Expr) ISysCategoryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysCategoryDo) Distinct(cols ...field.Expr) ISysCategoryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysCategoryDo) Omit(cols ...field.Expr) ISysCategoryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysCategoryDo) Join(table schema.Tabler, on ...field.Expr) ISysCategoryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysCategoryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysCategoryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysCategoryDo) Group(cols ...field.Expr) ISysCategoryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysCategoryDo) Having(conds ...gen.Condition) ISysCategoryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysCategoryDo) Limit(limit int) ISysCategoryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysCategoryDo) Offset(offset int) ISysCategoryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysCategoryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysCategoryDo) Unscoped() ISysCategoryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysCategoryDo) Create(values ...*cladminmodel.SysCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysCategoryDo) CreateInBatches(values []*cladminmodel.SysCategory, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysCategoryDo) Save(values ...*cladminmodel.SysCategory) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysCategoryDo) First() (*cladminmodel.SysCategory, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysCategory), nil
	}
}

func (s sysCategoryDo) Take() (*cladminmodel.SysCategory, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysCategory), nil
	}
}

func (s sysCategoryDo) Last() (*cladminmodel.SysCategory, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysCategory), nil
	}
}

func (s sysCategoryDo) Find() ([]*cladminmodel.SysCategory, error) {
	result, err := s.DO.Find()
	return result.([]*cladminmodel.SysCategory), err
}

func (s sysCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*cladminmodel.SysCategory, err error) {
	buf := make([]*cladminmodel.SysCategory, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysCategoryDo) FindInBatches(result *[]*cladminmodel.SysCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysCategoryDo) Attrs(attrs ...field.AssignExpr) ISysCategoryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysCategoryDo) Assign(attrs ...field.AssignExpr) ISysCategoryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysCategoryDo) Joins(fields ...field.RelationField) ISysCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysCategoryDo) Preload(fields ...field.RelationField) ISysCategoryDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysCategoryDo) FirstOrInit() (*cladminmodel.SysCategory, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysCategory), nil
	}
}

func (s sysCategoryDo) FirstOrCreate() (*cladminmodel.SysCategory, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysCategory), nil
	}
}

func (s sysCategoryDo) FindByPage(offset int, limit int) (result []*cladminmodel.SysCategory, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysCategoryDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysCategoryDo) Delete(models ...*cladminmodel.SysCategory) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysCategoryDo) withDO(do gen.Dao) *sysCategoryDo {
	s.DO = *do.(*gen.DO)
	return s
}
