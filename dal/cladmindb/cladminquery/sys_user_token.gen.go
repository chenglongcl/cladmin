// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package cladminquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"cladmin/dal/cladmindb/cladminmodel"
)

func newSysUserToken(db *gorm.DB, opts ...gen.DOOption) sysUserToken {
	_sysUserToken := sysUserToken{}

	_sysUserToken.sysUserTokenDo.UseDB(db, opts...)
	_sysUserToken.sysUserTokenDo.UseModel(&cladminmodel.SysUserToken{})

	tableName := _sysUserToken.sysUserTokenDo.TableName()
	_sysUserToken.ALL = field.NewAsterisk(tableName)
	_sysUserToken.UserID = field.NewUint64(tableName, "user_id")
	_sysUserToken.Token = field.NewString(tableName, "token")
	_sysUserToken.ExpireTime = field.NewTime(tableName, "expire_time")
	_sysUserToken.RefreshTime = field.NewTime(tableName, "refresh_time")
	_sysUserToken.CreatedAt = field.NewTime(tableName, "created_at")
	_sysUserToken.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysUserToken.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysUserToken.fillFieldMap()

	return _sysUserToken
}

type sysUserToken struct {
	sysUserTokenDo sysUserTokenDo

	ALL         field.Asterisk
	UserID      field.Uint64
	Token       field.String
	ExpireTime  field.Time
	RefreshTime field.Time
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (s sysUserToken) Table(newTableName string) *sysUserToken {
	s.sysUserTokenDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysUserToken) As(alias string) *sysUserToken {
	s.sysUserTokenDo.DO = *(s.sysUserTokenDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysUserToken) updateTableName(table string) *sysUserToken {
	s.ALL = field.NewAsterisk(table)
	s.UserID = field.NewUint64(table, "user_id")
	s.Token = field.NewString(table, "token")
	s.ExpireTime = field.NewTime(table, "expire_time")
	s.RefreshTime = field.NewTime(table, "refresh_time")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysUserToken) WithContext(ctx context.Context) ISysUserTokenDo {
	return s.sysUserTokenDo.WithContext(ctx)
}

func (s sysUserToken) TableName() string { return s.sysUserTokenDo.TableName() }

func (s sysUserToken) Alias() string { return s.sysUserTokenDo.Alias() }

func (s *sysUserToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysUserToken) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["token"] = s.Token
	s.fieldMap["expire_time"] = s.ExpireTime
	s.fieldMap["refresh_time"] = s.RefreshTime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysUserToken) clone(db *gorm.DB) sysUserToken {
	s.sysUserTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysUserToken) replaceDB(db *gorm.DB) sysUserToken {
	s.sysUserTokenDo.ReplaceDB(db)
	return s
}

type sysUserTokenDo struct{ gen.DO }

type ISysUserTokenDo interface {
	gen.SubQuery
	Debug() ISysUserTokenDo
	WithContext(ctx context.Context) ISysUserTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysUserTokenDo
	WriteDB() ISysUserTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysUserTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysUserTokenDo
	Not(conds ...gen.Condition) ISysUserTokenDo
	Or(conds ...gen.Condition) ISysUserTokenDo
	Select(conds ...field.Expr) ISysUserTokenDo
	Where(conds ...gen.Condition) ISysUserTokenDo
	Order(conds ...field.Expr) ISysUserTokenDo
	Distinct(cols ...field.Expr) ISysUserTokenDo
	Omit(cols ...field.Expr) ISysUserTokenDo
	Join(table schema.Tabler, on ...field.Expr) ISysUserTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysUserTokenDo
	Group(cols ...field.Expr) ISysUserTokenDo
	Having(conds ...gen.Condition) ISysUserTokenDo
	Limit(limit int) ISysUserTokenDo
	Offset(offset int) ISysUserTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserTokenDo
	Unscoped() ISysUserTokenDo
	Create(values ...*cladminmodel.SysUserToken) error
	CreateInBatches(values []*cladminmodel.SysUserToken, batchSize int) error
	Save(values ...*cladminmodel.SysUserToken) error
	First() (*cladminmodel.SysUserToken, error)
	Take() (*cladminmodel.SysUserToken, error)
	Last() (*cladminmodel.SysUserToken, error)
	Find() ([]*cladminmodel.SysUserToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*cladminmodel.SysUserToken, err error)
	FindInBatches(result *[]*cladminmodel.SysUserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*cladminmodel.SysUserToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysUserTokenDo
	Assign(attrs ...field.AssignExpr) ISysUserTokenDo
	Joins(fields ...field.RelationField) ISysUserTokenDo
	Preload(fields ...field.RelationField) ISysUserTokenDo
	FirstOrInit() (*cladminmodel.SysUserToken, error)
	FirstOrCreate() (*cladminmodel.SysUserToken, error)
	FindByPage(offset int, limit int) (result []*cladminmodel.SysUserToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysUserTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysUserTokenDo) Debug() ISysUserTokenDo {
	return s.withDO(s.DO.Debug())
}

func (s sysUserTokenDo) WithContext(ctx context.Context) ISysUserTokenDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysUserTokenDo) ReadDB() ISysUserTokenDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysUserTokenDo) WriteDB() ISysUserTokenDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysUserTokenDo) Session(config *gorm.Session) ISysUserTokenDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysUserTokenDo) Clauses(conds ...clause.Expression) ISysUserTokenDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysUserTokenDo) Returning(value interface{}, columns ...string) ISysUserTokenDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysUserTokenDo) Not(conds ...gen.Condition) ISysUserTokenDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysUserTokenDo) Or(conds ...gen.Condition) ISysUserTokenDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysUserTokenDo) Select(conds ...field.Expr) ISysUserTokenDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysUserTokenDo) Where(conds ...gen.Condition) ISysUserTokenDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysUserTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISysUserTokenDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysUserTokenDo) Order(conds ...field.Expr) ISysUserTokenDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysUserTokenDo) Distinct(cols ...field.Expr) ISysUserTokenDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysUserTokenDo) Omit(cols ...field.Expr) ISysUserTokenDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysUserTokenDo) Join(table schema.Tabler, on ...field.Expr) ISysUserTokenDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysUserTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysUserTokenDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysUserTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysUserTokenDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysUserTokenDo) Group(cols ...field.Expr) ISysUserTokenDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysUserTokenDo) Having(conds ...gen.Condition) ISysUserTokenDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysUserTokenDo) Limit(limit int) ISysUserTokenDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysUserTokenDo) Offset(offset int) ISysUserTokenDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysUserTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUserTokenDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysUserTokenDo) Unscoped() ISysUserTokenDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysUserTokenDo) Create(values ...*cladminmodel.SysUserToken) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysUserTokenDo) CreateInBatches(values []*cladminmodel.SysUserToken, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysUserTokenDo) Save(values ...*cladminmodel.SysUserToken) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysUserTokenDo) First() (*cladminmodel.SysUserToken, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysUserToken), nil
	}
}

func (s sysUserTokenDo) Take() (*cladminmodel.SysUserToken, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysUserToken), nil
	}
}

func (s sysUserTokenDo) Last() (*cladminmodel.SysUserToken, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysUserToken), nil
	}
}

func (s sysUserTokenDo) Find() ([]*cladminmodel.SysUserToken, error) {
	result, err := s.DO.Find()
	return result.([]*cladminmodel.SysUserToken), err
}

func (s sysUserTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*cladminmodel.SysUserToken, err error) {
	buf := make([]*cladminmodel.SysUserToken, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysUserTokenDo) FindInBatches(result *[]*cladminmodel.SysUserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysUserTokenDo) Attrs(attrs ...field.AssignExpr) ISysUserTokenDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysUserTokenDo) Assign(attrs ...field.AssignExpr) ISysUserTokenDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysUserTokenDo) Joins(fields ...field.RelationField) ISysUserTokenDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysUserTokenDo) Preload(fields ...field.RelationField) ISysUserTokenDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysUserTokenDo) FirstOrInit() (*cladminmodel.SysUserToken, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysUserToken), nil
	}
}

func (s sysUserTokenDo) FirstOrCreate() (*cladminmodel.SysUserToken, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*cladminmodel.SysUserToken), nil
	}
}

func (s sysUserTokenDo) FindByPage(offset int, limit int) (result []*cladminmodel.SysUserToken, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysUserTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysUserTokenDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysUserTokenDo) Delete(models ...*cladminmodel.SysUserToken) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysUserTokenDo) withDO(do gen.Dao) *sysUserTokenDo {
	s.DO = *do.(*gen.DO)
	return s
}
