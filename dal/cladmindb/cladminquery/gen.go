// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package cladminquery

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	SysArticle   *sysArticle
	SysBulletin  *sysBulletin
	SysCategory  *sysCategory
	SysConfig    *sysConfig
	SysDept      *sysDept
	SysDictData  *sysDictData
	SysDictType  *sysDictType
	SysMenu      *sysMenu
	SysRole      *sysRole
	SysRoleMenu  *sysRoleMenu
	SysUser      *sysUser
	SysUserRole  *sysUserRole
	SysUserToken *sysUserToken
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	SysArticle = &Q.SysArticle
	SysBulletin = &Q.SysBulletin
	SysCategory = &Q.SysCategory
	SysConfig = &Q.SysConfig
	SysDept = &Q.SysDept
	SysDictData = &Q.SysDictData
	SysDictType = &Q.SysDictType
	SysMenu = &Q.SysMenu
	SysRole = &Q.SysRole
	SysRoleMenu = &Q.SysRoleMenu
	SysUser = &Q.SysUser
	SysUserRole = &Q.SysUserRole
	SysUserToken = &Q.SysUserToken
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		SysArticle:   newSysArticle(db, opts...),
		SysBulletin:  newSysBulletin(db, opts...),
		SysCategory:  newSysCategory(db, opts...),
		SysConfig:    newSysConfig(db, opts...),
		SysDept:      newSysDept(db, opts...),
		SysDictData:  newSysDictData(db, opts...),
		SysDictType:  newSysDictType(db, opts...),
		SysMenu:      newSysMenu(db, opts...),
		SysRole:      newSysRole(db, opts...),
		SysRoleMenu:  newSysRoleMenu(db, opts...),
		SysUser:      newSysUser(db, opts...),
		SysUserRole:  newSysUserRole(db, opts...),
		SysUserToken: newSysUserToken(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	SysArticle   sysArticle
	SysBulletin  sysBulletin
	SysCategory  sysCategory
	SysConfig    sysConfig
	SysDept      sysDept
	SysDictData  sysDictData
	SysDictType  sysDictType
	SysMenu      sysMenu
	SysRole      sysRole
	SysRoleMenu  sysRoleMenu
	SysUser      sysUser
	SysUserRole  sysUserRole
	SysUserToken sysUserToken
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		SysArticle:   q.SysArticle.clone(db),
		SysBulletin:  q.SysBulletin.clone(db),
		SysCategory:  q.SysCategory.clone(db),
		SysConfig:    q.SysConfig.clone(db),
		SysDept:      q.SysDept.clone(db),
		SysDictData:  q.SysDictData.clone(db),
		SysDictType:  q.SysDictType.clone(db),
		SysMenu:      q.SysMenu.clone(db),
		SysRole:      q.SysRole.clone(db),
		SysRoleMenu:  q.SysRoleMenu.clone(db),
		SysUser:      q.SysUser.clone(db),
		SysUserRole:  q.SysUserRole.clone(db),
		SysUserToken: q.SysUserToken.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		SysArticle:   q.SysArticle.replaceDB(db),
		SysBulletin:  q.SysBulletin.replaceDB(db),
		SysCategory:  q.SysCategory.replaceDB(db),
		SysConfig:    q.SysConfig.replaceDB(db),
		SysDept:      q.SysDept.replaceDB(db),
		SysDictData:  q.SysDictData.replaceDB(db),
		SysDictType:  q.SysDictType.replaceDB(db),
		SysMenu:      q.SysMenu.replaceDB(db),
		SysRole:      q.SysRole.replaceDB(db),
		SysRoleMenu:  q.SysRoleMenu.replaceDB(db),
		SysUser:      q.SysUser.replaceDB(db),
		SysUserRole:  q.SysUserRole.replaceDB(db),
		SysUserToken: q.SysUserToken.replaceDB(db),
	}
}

type queryCtx struct {
	SysArticle   ISysArticleDo
	SysBulletin  ISysBulletinDo
	SysCategory  ISysCategoryDo
	SysConfig    ISysConfigDo
	SysDept      ISysDeptDo
	SysDictData  ISysDictDataDo
	SysDictType  ISysDictTypeDo
	SysMenu      ISysMenuDo
	SysRole      ISysRoleDo
	SysRoleMenu  ISysRoleMenuDo
	SysUser      ISysUserDo
	SysUserRole  ISysUserRoleDo
	SysUserToken ISysUserTokenDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		SysArticle:   q.SysArticle.WithContext(ctx),
		SysBulletin:  q.SysBulletin.WithContext(ctx),
		SysCategory:  q.SysCategory.WithContext(ctx),
		SysConfig:    q.SysConfig.WithContext(ctx),
		SysDept:      q.SysDept.WithContext(ctx),
		SysDictData:  q.SysDictData.WithContext(ctx),
		SysDictType:  q.SysDictType.WithContext(ctx),
		SysMenu:      q.SysMenu.WithContext(ctx),
		SysRole:      q.SysRole.WithContext(ctx),
		SysRoleMenu:  q.SysRoleMenu.WithContext(ctx),
		SysUser:      q.SysUser.WithContext(ctx),
		SysUserRole:  q.SysUserRole.WithContext(ctx),
		SysUserToken: q.SysUserToken.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
